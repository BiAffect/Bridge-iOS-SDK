<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/SBBParticipantManager.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/SBBParticipantManager</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>SBBParticipantManager.h</DeclaredIn>
            
			
			<NodeRef refid="10"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SBBParticipantManager/getParticipantRecordWithCompletion:</TokenIdentifier>
			<Abstract type="html">Fetch the StudyParticipant record from cache if caching is turned on, otherwise from the Bridge API.</Abstract>
			<DeclaredIn>SBBParticipantManager.m</DeclaredIn>
			
			<Declaration>- (NSURLSessionTask *)getParticipantRecordWithCompletion:(SBBParticipantManagerGetRecordCompletionBlock)completion</Declaration>
			<Parameters>
				<Parameter>
					<Name>completion</Name>
					<Abstract type="html">An SBBParticipantManagerGetRecordCompletionBlock to be called upon completion.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An NSURLSessionTask object so you can cancel or suspend/resume the request.</Abstract></ReturnValue>
			<Anchor>//api/name/getParticipantRecordWithCompletion:</Anchor>
            <NodeRef refid="10"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SBBParticipantManager/updateParticipantRecordWithRecord:completion:</TokenIdentifier>
			<Abstract type="html">Update the StudyParticipant record to the Bridge API.</Abstract>
			<DeclaredIn>SBBParticipantManager.m</DeclaredIn>
			
			<Declaration>- (NSURLSessionTask *)updateParticipantRecordWithRecord:(id)participant completion:(SBBParticipantManagerCompletionBlock)completion</Declaration>
			<Parameters>
				<Parameter>
					<Name>participant</Name>
					<Abstract type="html">A client object representing the StudyParticipant record as it should be updated. If caching is enabled and you want to sync changes you&apos;ve made to the local (cached) SBBStudyParticipant to Bridge, pass nil for this parameter.</Abstract>
				</Parameter><Parameter>
					<Name>completion</Name>
					<Abstract type="html">An SBBParticipantManagerCompletionBlock to be called upon completion.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An NSURLSessionTask object so you can cancel or suspend/resume the request.</Abstract></ReturnValue>
			<Anchor>//api/name/updateParticipantRecordWithRecord:completion:</Anchor>
            <NodeRef refid="10"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SBBParticipantManager/setExternalIdentifier:completion:</TokenIdentifier>
			<Abstract type="html">Add an external identifier for a participant.</Abstract>
			<DeclaredIn>SBBParticipantManager.m</DeclaredIn>
			
			<Declaration>- (NSURLSessionTask *)setExternalIdentifier:(NSString *)externalID completion:(SBBParticipantManagerCompletionBlock)completion</Declaration>
			<Parameters>
				<Parameter>
					<Name>externalID</Name>
					<Abstract type="html">An external identifier to allow this participant to be tracked outside of the Bridge-specific study.</Abstract>
				</Parameter><Parameter>
					<Name>completion</Name>
					<Abstract type="html">An SBBParticipantManagerCompletionBlock to be called upon completion.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An NSURLSessionTask object so you can cancel or suspend/resume the request.</Abstract></ReturnValue>
			<Anchor>//api/name/setExternalIdentifier:completion:</Anchor>
            <NodeRef refid="10"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SBBParticipantManager/setSharingScope:completion:</TokenIdentifier>
			<Abstract type="html">Change the scope of data sharing for this user.
This is a convenience method that sets the participant record&apos;s sharingScope field and updates it to Bridge.
This should only be done in response to an explicit choice on the part of the user to change the sharing scope.</Abstract>
			<DeclaredIn>SBBParticipantManager.m</DeclaredIn>
			
			<Declaration>- (NSURLSessionTask *)setSharingScope:(SBBParticipantDataSharingScope)scope completion:(SBBParticipantManagerCompletionBlock)completion</Declaration>
			<Parameters>
				<Parameter>
					<Name>scope</Name>
					<Abstract type="html">The scope of data sharing to set for this user.</Abstract>
				</Parameter><Parameter>
					<Name>completion</Name>
					<Abstract type="html">An SBBParticipantManagerCompletionBlock to be called upon completion.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An NSURLSessionTask object so you can cancel or suspend/resume the request.</Abstract></ReturnValue>
			<Anchor>//api/name/setSharingScope:completion:</Anchor>
            <NodeRef refid="10"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SBBParticipantManager/getDataGroupsWithCompletion:</TokenIdentifier>
			<Abstract type="html">Fetch the data groups to which this user belongs from the Bridge API.
This is a convenience method which fetches the StudyParticipant record (from cache, if available, otherwise from Bridge)
and passes its dataGroups to the completion handler.</Abstract>
			<DeclaredIn>SBBParticipantManager.m</DeclaredIn>
			
			<Declaration>- (NSURLSessionTask *)getDataGroupsWithCompletion:(SBBParticipantManagerGetGroupsCompletionBlock)completion</Declaration>
			<Parameters>
				<Parameter>
					<Name>completion</Name>
					<Abstract type="html">An SBBParticipantManagerGetGroupsCompletionBlock to be called upon completion.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An NSURLSessionTask object so you can cancel or suspend/resume the request.</Abstract></ReturnValue>
			<Anchor>//api/name/getDataGroupsWithCompletion:</Anchor>
            <NodeRef refid="10"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SBBParticipantManager/updateDataGroupsWithGroups:completion:</TokenIdentifier>
			<Abstract type="html">Update the user&apos;s dataGroups to the Bridge API.</Abstract>
			<DeclaredIn>SBBParticipantManager.m</DeclaredIn>
			
			<Declaration>- (NSURLSessionTask *)updateDataGroupsWithGroups:(NSSet&lt;NSString*&gt; *)dataGroups completion:(SBBParticipantManagerCompletionBlock)completion</Declaration>
			<Parameters>
				<Parameter>
					<Name>dataGroups</Name>
					<Abstract type="html">An NSSet of strings representing the dataGroups as they should be updated.</Abstract>
				</Parameter><Parameter>
					<Name>completion</Name>
					<Abstract type="html">An SBBParticipantManagerCompletionBlock to be called upon completion.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An NSURLSessionTask object so you can cancel or suspend/resume the request.</Abstract></ReturnValue>
			<Anchor>//api/name/updateDataGroupsWithGroups:completion:</Anchor>
            <NodeRef refid="10"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SBBParticipantManager/addToDataGroups:completion:</TokenIdentifier>
			<Abstract type="html">Add the user to the specified data groups (tags).</Abstract>
			<DeclaredIn>SBBParticipantManager.m</DeclaredIn>
			
			<Declaration>- (NSURLSessionTask *)addToDataGroups:(NSSet&lt;NSString*&gt; *)dataGroups completion:(SBBParticipantManagerCompletionBlock)completion</Declaration>
			<Parameters>
				<Parameter>
					<Name>dataGroups</Name>
					<Abstract type="html">The data groups to which to add the user. This is a convenience method which first calls getDataGroupsWithCompletion:, and in its completion handler, adds the specified groups to the returned dataGroups and posts the modified dataGroups back to the Bridge API via updateDataGroupWithGroups:completion:. If there is an error fetching the user&apos;s existing dataGroups, that error will be passed to the completion handler. If an attempt is made to add a user to one or more data groups that haven&apos;t first been defined in the study, the Bridge API will respond with 400 (Bad Request) with an error message detailing the problem in the body of the response.</Abstract>
				</Parameter><Parameter>
					<Name>completion</Name>
					<Abstract type="html">An SBBUserManagerCompletionBlock to be called upon completion.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/addToDataGroups:completion:</Anchor>
            <NodeRef refid="10"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SBBParticipantManager/removeFromDataGroups:completion:</TokenIdentifier>
			<Abstract type="html">Remove the user from the specified data groups (tags).</Abstract>
			<DeclaredIn>SBBParticipantManager.m</DeclaredIn>
			
			<Declaration>- (NSURLSessionTask *)removeFromDataGroups:(NSSet&lt;NSString*&gt; *)dataGroups completion:(SBBParticipantManagerCompletionBlock)completion</Declaration>
			<Parameters>
				<Parameter>
					<Name>dataGroups</Name>
					<Abstract type="html">The data groups from which to remove the user. This is a convenience method which first calls getDataGroupsWithCompletion:, and in its completion handler, removes the specified groups from the returned dataGroups and posts the modified dataGroups back to the Bridge API via updateDataGroupWithGroups:completion:. If there is an error fetching the user&apos;s existing dataGroups, that error will be passed to the completion handler. If the fetch succeeds but the user is not a member of one or more of these data groups, whether because they haven&apos;t been added or because they don&apos;t exist in the study, this method will complete without updating the user&apos;s dataGroups and without an error.</Abstract>
				</Parameter><Parameter>
					<Name>completion</Name>
					<Abstract type="html">An SBBUserManagerCompletionBlock to be called upon completion.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/removeFromDataGroups:completion:</Anchor>
            <NodeRef refid="10"/>
		</Token>
		
        
        
	</File>
</Tokens>