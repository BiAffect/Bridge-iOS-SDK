<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Protocols/SBBUploadManagerProtocol.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intf/SBBUploadManagerProtocol</TokenIdentifier>
			<Abstract type="html">This protocol defines the interface to the SBBUploadManager&apos;s non-constructor, non-initializer methods. The interface is
abstracted out for use in mock objects for testing, and to allow selecting among multiple implementations at runtime.</Abstract>
			<DeclaredIn>SBBUploadManager.h</DeclaredIn>
            
			
			<NodeRef refid="28"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/SBBUploadManagerProtocol/setUploadDelegate:</TokenIdentifier>
			<Abstract type="html">Set this property to set an upload delegate to be notified when a background upload completes (or fails), even if
it happens after the app has been relaunched. Note that if the user swipes the app out of the app switcher screen,
all current uploads will have been canceled anyway and the uploadDelegate won&apos;t get called.</Abstract>
			<DeclaredIn>SBBUploadManager.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, weak) id&lt;SBBUploadManagerDelegate&gt; uploadDelegate</Declaration>
			
			
			<Anchor>//api/name/uploadDelegate</Anchor>
            <NodeRef refid="28"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/SBBUploadManagerProtocol/uploadDelegate</TokenIdentifier>
			<Abstract type="html">Set this property to set an upload delegate to be notified when a background upload completes (or fails), even if
it happens after the app has been relaunched. Note that if the user swipes the app out of the app switcher screen,
all current uploads will have been canceled anyway and the uploadDelegate won&apos;t get called.</Abstract>
			<DeclaredIn>SBBUploadManager.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, weak) id&lt;SBBUploadManagerDelegate&gt; uploadDelegate</Declaration>
			
			
			<Anchor>//api/name/uploadDelegate</Anchor>
            <NodeRef refid="28"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfp/SBBUploadManagerProtocol/uploadDelegate</TokenIdentifier>
			<Abstract type="html">Set this property to set an upload delegate to be notified when a background upload completes (or fails), even if
it happens after the app has been relaunched. Note that if the user swipes the app out of the app switcher screen,
all current uploads will have been canceled anyway and the uploadDelegate won&apos;t get called.</Abstract>
			<DeclaredIn>SBBUploadManager.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, weak) id&lt;SBBUploadManagerDelegate&gt; uploadDelegate</Declaration>
			
			
			<Anchor>//api/name/uploadDelegate</Anchor>
            <NodeRef refid="28"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/SBBUploadManagerProtocol/uploadFileToBridge:contentType:completion:</TokenIdentifier>
			<Abstract type="html">Upload a file to the Bridge server on behalf of the authenticated user, via the NSURLSessionUploadTask so it can proceed
even if the app is suspended or killed. Requesting the pre-signed URL for the upload from the Bridge API happens in a
background download task so that the whole process can be initiated regardless of current network connectivity, and will
proceed as and when possible.</Abstract>
			<DeclaredIn>SBBUploadManager.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/intfp/SBBUploadManagerProtocol/uploadDelegate</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (void)uploadFileToBridge:(NSURL *)fileUrl contentType:(NSString *)contentType completion:(SBBUploadManagerCompletionBlock)completion</Declaration>
			<Parameters>
				<Parameter>
					<Name>fileUrl</Name>
					<Abstract type="html">The file to upload.</Abstract>
				</Parameter><Parameter>
					<Name>contentType</Name>
					<Abstract type="html">The MIME type of the file (defaults to &quot;application/octet-stream&quot; if nil).</Abstract>
				</Parameter><Parameter>
					<Name>completion</Name>
					<Abstract type="html">A completion block to be called when the upload finishes (or fails). Note that this will never be called if the app has to be relaunched to respond to the background session delegate events; blocks cannot be persisted across app launches. If you need to be sure to get the call upon completion (successful or otherwise), set an uploadDelegate.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/uploadFileToBridge:contentType:completion:</Anchor>
            <NodeRef refid="28"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/intfm/SBBUploadManagerProtocol/uploadFileToBridge:completion:</TokenIdentifier>
			<Abstract type="html">This is a convenience method that determines the appropriate content-type based on the file extension and calls through to
uploadFileToBridge:contentType:completion:.</Abstract>
			<DeclaredIn>SBBUploadManager.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/intfm/SBBUploadManagerProtocol/uploadFileToBridge:contentType:completion:</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (void)uploadFileToBridge:(NSURL *)fileUrl completion:(SBBUploadManagerCompletionBlock)completion</Declaration>
			
			
			<Anchor>//api/name/uploadFileToBridge:completion:</Anchor>
            <NodeRef refid="28"/>
		</Token>
		
        
        
	</File>
</Tokens>